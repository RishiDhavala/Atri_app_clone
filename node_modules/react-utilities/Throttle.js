'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('./utils');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = require('debug')('react-utilities:Throttle');
var Throttle = (_temp2 = _class = function (_Component) {
  _inherits(Throttle, _Component);

  function Throttle() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Throttle);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Throttle.__proto__ || Object.getPrototypeOf(Throttle)).call.apply(_ref, [this].concat(args))), _this), _this.timer = null, _this.renderProps = {}, _this.lastRenderTime = 0, _this.setRenderProps = function () {
      var _this$props = _this.props,
          timeout = _this$props.timeout,
          leading = _this$props.leading,
          children = _this$props.children,
          component = _this$props.component,
          props = _objectWithoutProperties(_this$props, ['timeout', 'leading', 'children', 'component']);

      _this.lastRenderTime = new Date().getTime();
      _this.renderProps = props;
    }, _this.clearTimer = function () {
      clearTimeout(_this.timer);
      _this.timer = null;
    }, _this.deferUpdate = function (timeout) {
      _this.clearTimer();
      if (timeout > 0) {
        _this.timer = setTimeout(function () {
          _this.clearTimer();
          _this.forceUpdate();
        }, timeout);
      } else {
        _this.setRenderProps();
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Throttle, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.leading) {
        this.setRenderProps();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.clearTimer();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          timeout = _props.timeout,
          leading = _props.leading,
          component = _props.component,
          props = _objectWithoutProperties(_props, ['timeout', 'leading', 'component']);

      if (timeout === Infinity) {
        timeout = Number.MAX_VALUE;
      }
      this.deferUpdate(this.lastRenderTime + timeout - new Date().getTime());

      return (0, _utils.render)(component, this.renderProps);
    }
  }]);

  return Throttle;
}(_react.Component), _class.propTypes = {
  timeout: _propTypes2.default.number,
  leading: _propTypes2.default.bool
}, _class.defaultProps = {
  timeout: 0,
  leading: true
}, _temp2);
exports.default = Throttle;