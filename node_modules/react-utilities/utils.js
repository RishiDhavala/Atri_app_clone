'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenderablePropType = undefined;
exports.render = render;
exports.isSwallowEqual = isSwallowEqual;
exports.isPropsSwallowEqual = isPropsSwallowEqual;
exports.isElementSwallowEqual = isElementSwallowEqual;
exports.isChildrenSwallowEqual = isChildrenSwallowEqual;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isPlainObject = require('is-plain-object');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var debug = require('debug')('react-utilities:utils');

function isEmptyObject(obj) {
  return !Object.keys(obj).length;
}

var RenderablePropType = exports.RenderablePropType = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.element]);

function render(Comp, props) {
  if (!(0, _isPlainObject2.default)(props)) {
    props = { children: props };
  }
  if (!Comp) {
    var _props = props,
        children = _props.children,
        oProps = _objectWithoutProperties(_props, ['children']);

    if (!children) {
      return null;
    } else {
      return render(_react2.default.Children.only(children), oProps);
    }
  } else if (_react2.default.isValidElement(Comp)) {
    var _props2 = props,
        _children = _props2.children,
        _oProps = _objectWithoutProperties(_props2, ['children']);

    return isEmptyObject(_oProps) ? Comp : _react2.default.cloneElement(Comp, _oProps);
  } else {
    return _react2.default.createElement(Comp, props);
  }
}

function isSwallowEqual(a, b) {
  if (a === b || !a && !b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }

  var numKeysA = 0,
      numKeysB = 0;
  for (var key in b) {
    numKeysB++;
    if ( /*!isPrimitive(b[key]) ||*/!a.hasOwnProperty(key) || a[key] !== b[key]) {
      debug('not equal:', key, a, b);
      return false;
    }
  }
  for (var _key in a) {
    numKeysA++;
  }
  return numKeysA === numKeysB;
}

function isPropsSwallowEqual(props1, props2) {
  debug('isPropsSwallowEqual', props1, props2);
  if (props1 === props2 || !props1 && !props2) {
    return true;
  }
  if (!props1 || !props2) {
    return false;
  }

  var children1 = props1.children,
      other1 = _objectWithoutProperties(props1, ['children']);

  var children2 = props2.children,
      other2 = _objectWithoutProperties(props2, ['children']);

  return isSwallowEqual(other1, other2) && isChildrenSwallowEqual(children1, children2);
}

function isElementSwallowEqual(element1, element2) {
  debug('isElementSwallowEqual', element1, element2);
  if (element1 === element2 || !element1 && !element2) {
    return true;
  }
  if (!element1 || !element2) {
    return false;
  }
  if (!(0, _isPlainObject2.default)(element1) || !('$$typeof' in element1)) {
    // non react component
    return element1 === element2;
  }
  var props1 = element1.props,
      key1 = element1.key1,
      ref1 = element1.ref1;
  var props2 = element2.props,
      key2 = element2.key2,
      ref2 = element2.ref2;


  return key1 === key2 && ref1 === ref2 && isPropsSwallowEqual(props1, props2);
}
function isChildrenSwallowEqual(children1, children2) {
  debug('isChildrenSwallowEqual', children1, children2);
  if (children1 === children2 || !children1 && !children2) {
    return true;
  }
  if (!children1 || !children2) {
    return false;
  }
  var n = _react2.default.Children.count(children1);
  if (n !== _react2.default.Children.count(children2)) {
    return false;
  }
  for (var i = 0; i < n; ++i) {
    if (!isElementSwallowEqual(children1[i], children2[i])) {
      return false;
    }
  }
  return true;
}