"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REJECTED = exports.FULFILLED = exports.PENDING = exports.IDLE = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _isPlainObject = require("is-plain-object");

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _utils = require("./utils");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = require('debug')('react-utilities:Resolve');

var IDLE = exports.IDLE = 'idle';
var PENDING = exports.PENDING = "pending";
var FULFILLED = exports.FULFILLED = "fulfilled";
var REJECTED = exports.REJECTED = "rejected";

var Resolve = (_temp2 = _class = function (_Component) {
  _inherits(Resolve, _Component);

  function Resolve() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Resolve);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Resolve.__proto__ || Object.getPrototypeOf(Resolve)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: null,
      _state: IDLE
    }, _this.promise = null, _this.isUnmount = false, _this.setPromise = function () {
      var promise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (promise !== _this.promise) {
        debug('setPromise', promise);
        _this.promise = promise;

        promise && promise.then(function (data) {
          return _this.done(promise, data, FULFILLED);
        }, function (error) {
          return _this.done(promise, error, REJECTED);
        });
        // Prevent the flash when changing promise.
        _this.isPromiseSwitching = true;
        setTimeout(function () {
          if (_this.isPromiseSwitching) {
            _this.isPromiseSwitching = false;
            _this.isUnmount || _this.setState({
              value: null,
              _state: _this.promise ? PENDING : IDLE
            });
          }
        });
      }
    }, _this.done = function (promise, value, state) {
      debug('done', promise, value, state);
      if (promise === _this.promise) {
        _this.isPromiseSwitching = false;
        _this.setState({
          _state: state,
          value: value
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Resolve, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.setPromise(nextProps.promise);
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.setPromise(this.props.promise);
      this.isUnmount = false;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.setPromise();
      this.isUnmount = true;
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          name = _props.name,
          promise = _props.promise,
          idle = _props.idle,
          pending = _props.pending,
          rejected = _props.rejected,
          fulfilled = _props.fulfilled,
          children = _props.children,
          props = _objectWithoutProperties(_props, ["name", "promise", "idle", "pending", "rejected", "fulfilled", "children"]);

      var _state2 = this.state,
          _state = _state2._state,
          value = _state2.value;

      switch (_state) {
        case IDLE:
          return (0, _utils.render)(idle, props);
        case PENDING:
          return (0, _utils.render)(pending, props);
        case REJECTED:
          return (0, _utils.render)(rejected, _extends({ error: value }, props));
        case FULFILLED:
          var resolvedProps = name ? _defineProperty({}, name, value) : (0, _isPlainObject2.default)(value) ? value : {};
          return (0, _utils.render)(fulfilled, _extends({ children: children }, props, resolvedProps));
      }
    }
  }]);

  return Resolve;
}(_react.Component), _class.propTypes = {
  name: _propTypes2.default.string,
  promise: _propTypes2.default.object,
  idle: _utils.RenderablePropType,
  pending: _utils.RenderablePropType,
  rejected: _utils.RenderablePropType,
  fulfilled: _utils.RenderablePropType
}, _temp2);
exports.default = Resolve;